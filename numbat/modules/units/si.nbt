use core::dimensions
use math::constants

### SI base units

@metric_prefixes
@aliases(meters, metre, metres, m: short)
unit meter: Length

@metric_prefixes
@aliases(seconds, s: short, sec: none)
unit second: Time

@metric_prefixes
@aliases(grams, gramme, grammes, g: short)
unit gram: Mass

@metric_prefixes
@aliases(amperes, A: short)
unit ampere: Current

@metric_prefixes
@aliases(kelvins, K: short)
unit kelvin: Temperature

@metric_prefixes
@aliases(moles, mol: short)
unit mole: AmountOfSubstance

@metric_prefixes
@aliases(candelas, cd: short)
unit candela: LuminousIntensity

### SI derived units

@metric_prefixes
@aliases(radians, rad: short)
unit radian: Angle

@metric_prefixes
@aliases(steradians, sr: short)
unit steradian: SolidAngle = radian^2

@metric_prefixes
@aliases(Hz: short)
unit hertz: Frequency = 1 / second

@metric_prefixes
@aliases(newtons, N: short)
unit newton: Force = kilogram meter / second^2

@metric_prefixes
@aliases(pascals, Pa: short)
unit pascal: Pressure = newton / meter^2

@metric_prefixes
@aliases(joules, J: short)
unit joule: Energy = newton meter

@metric_prefixes
@aliases(watts, W: short)
unit watt: Power = joule / second

@metric_prefixes
@aliases(coulombs, C: short)
unit coulomb: Charge = ampere second

@metric_prefixes
@aliases(volts, V: short)
unit volt: Voltage = kilogram meter^2 / (second^3 ampere)

@metric_prefixes
@aliases(farads, F: short)
unit farad: Capacitance = coulomb / volt

@metric_prefixes
@aliases(ohms, Ω: short)
unit ohm: Resistance = volt / ampere

@metric_prefixes
@aliases(S: short)
unit siemens: Conductance = 1 / ohm

@metric_prefixes
@aliases(webers, Wb: short)
unit weber: MagneticFlux = volt second

@metric_prefixes
@aliases(teslas, T: short)
unit tesla: MagneticFluxDensity = weber / meter^2

@metric_prefixes
@aliases(henrys, henries, H: short)
unit henry: Inductance = weber / ampere

@metric_prefixes
@aliases(lumens, lm: short)
unit lumen: LuminousFlux = candela steradian

@metric_prefixes
@aliases(lx: short)
unit lux: Illuminance = lumen / meter^2

@metric_prefixes
@aliases(becquerels, Bq: short)
unit becquerel: Activity = 1 / second

@metric_prefixes
@aliases(grays, Gy: short)
unit gray: AbsorbedDose = joule / kilogram

@metric_prefixes
@aliases(sieverts, Sv: short)
unit sievert: EquivalentDose = joule / kilogram

@metric_prefixes
@aliases(katals, kat: short)
unit katal: CatalyticActivity = mole / second

### SI accepted units

@aliases(minutes, min: short)
unit minute: Time = 60 seconds

@aliases(hours, hr, h: short)
unit hour: Time = 60 minutes

@aliases(days, day: short, d: short)
unit day: Time = 24 hours

@aliases(astronomicalunits, au: short, AU: short)
unit astronomicalunit: Length = 149_597_870_700 meter

@aliases(degrees, deg, °: short)
unit degree: Angle = π / 180 × radian

@aliases(arcminutes, arcmin)
unit arcminute: Angle = 1 / 60 × degree

@aliases(arcseconds, arcsec)
unit arcsecond: Angle = 1 / 60 × arcminute

unit are: Area = (10 m)^2

@aliases(hectares, ha: short)
unit hectare: Area = 100 are

@metric_prefixes
@aliases(litres, liter, liters, l: short, L: short)
unit litre: Volume = decimeter^3

@metric_prefixes
@aliases(tonnes, ton: both, tons: both, metricton: none)
unit tonne: Mass = 10^3 kilogram

@aliases(daltons, Da: short)
unit dalton: Mass = 1.660539040e-27 kilogram

@metric_prefixes
@aliases(electronvolts, eV: short)
unit electronvolt: Energy = 1.602176634e-19 joule
